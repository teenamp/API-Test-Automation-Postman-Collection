{
	"info": {
		"_postman_id": "5fd6d5ef-7038-40db-82b2-0ad9a1d7a503",
		"name": "Employees Benefits Verification Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Employee List",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response has a JSON body\", () => {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const employees = pm.response.json();\r",
							"\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(employees).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify an Employee Has All Properties\", () => {\r",
							"    if (employees.count > 0){\r",
							"        let firstEmp = employees[0];\r",
							"        pm.expect(firstEmp.firstName).to.be.a('string');\r",
							"        pm.expect(firstEmp.lastName).to.be.a('string');\r",
							"        pm.expect(firstEmp.dependants).to.be.a('number');\r",
							"        pm.expect(firstEmp.salary).to.be.a('number');\r",
							"        pm.expect(firstEmp.gross).to.be.a('number');\r",
							"        pm.expect(firstEmp.benefitsCost).to.be.a('number');\r",
							"        pm.expect(firstEmp.net).to.be.a('number');\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Verify employees’ Benefits Packages\", () => {\r",
							"    let monthlySalary = 2000;\r",
							"    let nunOfpaychecks = 26;\r",
							"    let costOfBenefitsPerYear = 1000;\r",
							"    let dependentCostPerYear = 500;\r",
							"    let expectedSalary = monthlySalary * nunOfpaychecks;\r",
							"\r",
							"    if (employees.count > 0){\r",
							"        let firstEmp = employees[0];      \r",
							"        let numOfdependants = firstEmp.dependants;\r",
							"        let expectedBenefitsCost = (costOfBenefitsPerYear + dependentCostPerYear * numOfdependants) / 26;\r",
							"        let expectedNet = monthlySalary - expectedBenefitsCost;\r",
							"        pm.expect(firstEmp.salary).to.eql(expectedSalary);\r",
							"        pm.expect(firstEmp.gross).to.eql(monthlySalary);\r",
							"        pm.expect(firstEmp.benefitsCost.toPrecision(2)).to.eql(expectedBenefitsCost.toPrecision(2));\r",
							"        pm.expect(firstEmp.net.toPrecision(2)).to.eql(expectedNet.toPrecision(2));\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic VGVzdFVzZXI4MzohNUFSfXlTQy1pdnc=",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"api",
						"employees"
					]
				}
			},
			"response": [
				{
					"name": "Get Employee List",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
							"protocol": "https",
							"host": [
								"wmxrwq14uc",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"Prod",
								"api",
								"employees"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "626"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Mon, 03 Feb 2020 19:06:53 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "e1b146c6-7a04-4a7b-96bd-380bb13d9a4e"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "HVZUKE7XoAMF9zA="
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-5e386f4d-cac36a4413295f7df774bd58;Sampled=0"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "ORD52-C1"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "hSm_Jsqc_yaXsj2yELKp03K5oDWhSfeYrwgUh_hmlh0v1onUHQaqEQ=="
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"username\": \"TestUser1\",\n        \"id\": \"15ab4884-e96c-4b4f-842c-6dd389033766\",\n        \"firstName\": \"Steve\",\n        \"lastName\": \"Rogers\",\n        \"dependants\": 1,\n        \"expiration\": \"2020-02-23T17:41:07+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 57.69231,\n        \"net\": 1942.30774\n    },\n    {\n        \"partitionKey\": \"TestUser1\",\n        \"sortKey\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"username\": \"TestUser1\",\n        \"id\": \"ee4e35f4-bbe8-4905-afaa-48403c19c42e\",\n        \"firstName\": \"Tony\",\n        \"lastName\": \"Stark\",\n        \"dependants\": 2,\n        \"expiration\": \"2020-03-03T19:06:35+00:00\",\n        \"salary\": 52000,\n        \"gross\": 2000,\n        \"benefitsCost\": 76.92308,\n        \"net\": 1923.0769\n    }\n]"
				}
			]
		},
		{
			"name": "Add Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);// suppose to get 201. I think 200 is ok",
							"});",
							"",
							"pm.test(\"Response has a JSON body\", () => {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const employee = pm.response.json();",
							"",
							"pm.test(\"Test data type of the response\", () => {",
							"    pm.expect(employee).to.be.an(\"object\");",
							"});",
							"",
							"pm.test(\"Verify an Employee Has All Properties\", () => {",
							"    pm.expect(employee.firstName).to.be.a('string');",
							"    pm.expect(employee.lastName).to.be.a('string');",
							"    pm.expect(employee.dependants).to.be.a('number');",
							"    pm.expect(employee.salary).to.be.a('number');",
							"    pm.expect(employee.gross).to.be.a('number');",
							"    pm.expect(employee.benefitsCost).to.be.a('number');",
							"    pm.expect(employee.net).to.be.a('number');",
							"});",
							"",
							"pm.test(\"Verify employees’ Benefits Packages\", () => {",
							"    let monthlySalary = 2000;",
							"    let nunOfpaychecks = 26;",
							"    let costOfBenefitsPerYear = 1000;",
							"    let dependentCostPerYear = 500;",
							"    let expectedSalary = monthlySalary * nunOfpaychecks;       ",
							"    let numOfdependants = 3;",
							"    let expectedBenefitsCost = (costOfBenefitsPerYear + dependentCostPerYear * numOfdependants) / 26;",
							"    let expectedNet = monthlySalary - expectedBenefitsCost;",
							"    pm.expect(employee.dependants).to.eql(numOfdependants);",
							"    pm.expect(employee.salary).to.eql(expectedSalary);",
							"    pm.expect(employee.gross).to.eql(monthlySalary);",
							"    pm.expect(employee.benefitsCost.toPrecision(2)).to.eql(expectedBenefitsCost.toPrecision(2));",
							"    pm.expect(employee.net.toPrecision(2)).to.eql(expectedNet.toPrecision(2));    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Basic VGVzdFVzZXI4MzohNUFSfXlTQy1pdnc=",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\": \"Natasha\",\n    \"lastName\": \"Romanoff\",\n    \"dependants\": 3\n}"
				},
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"api",
						"employees"
					]
				}
			},
			"response": [
				{
					"name": "Add Employee",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Natasha\",\n    \"lastName\": \"Romanoff\",\n    \"dependants\": 3\n}"
						},
						"url": {
							"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
							"protocol": "https",
							"host": [
								"wmxrwq14uc",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"Prod",
								"api",
								"employees"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "278"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Mon, 03 Feb 2020 19:09:21 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "3396c97b-999d-4f05-9a05-e703570f753e"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "HVZrMGHHoAMFygA="
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-5e386fe1-6e06a18a49d85a67160a88a7;Sampled=0"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "ORD52-C1"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "nFIi5rL0BsEjX8yNyOIIgOTSBrAoosGndMNagg_yN3RMBGx-TQYmVA=="
						}
					],
					"cookie": [],
					"body": "{\n    \"partitionKey\": \"TestUser1\",\n    \"sortKey\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"username\": \"TestUser1\",\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"firstName\": \"Natasha\",\n    \"lastName\": \"Romanoff\",\n    \"dependants\": 3,\n    \"salary\": 52000,\n    \"gross\": 2000,\n    \"benefitsCost\": 96.1538544,\n    \"net\": 1903.84619\n}"
				}
			]
		},
		{
			"name": "Get Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response has a JSON body\", () => {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const employee = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Verify an Employee Has All Properties\", () => {\r",
							"        pm.expect(employee.firstName).to.be.a('string');\r",
							"        pm.expect(employee.lastName).to.be.a('string');\r",
							"        pm.expect(employee.dependants).to.be.a('number');\r",
							"        pm.expect(employee.salary).to.be.a('number');\r",
							"        pm.expect(employee.gross).to.be.a('number');\r",
							"        pm.expect(employee.benefitsCost).to.be.a('number');\r",
							"        pm.expect(employee.net).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify employees’ Benefits Packages\", () => {\r",
							"    let monthlySalary = 2000;\r",
							"    let nunOfpaychecks = 26;\r",
							"    let costOfBenefitsPerYear = 1000;\r",
							"    let dependentCostPerYear = 500;\r",
							"    let expectedSalary = monthlySalary * nunOfpaychecks;   \r",
							"    let numOfdependants = employee.dependants;\r",
							"    let expectedBenefitsCost = (costOfBenefitsPerYear + dependentCostPerYear * numOfdependants) / 26;\r",
							"    let expectedNet = monthlySalary - expectedBenefitsCost;\r",
							"\r",
							"    pm.expect(employee.salary).to.eql(expectedSalary);\r",
							"    pm.expect(employee.gross).to.eql(monthlySalary);\r",
							"    pm.expect(employee.benefitsCost.toPrecision(2)).to.eql(expectedBenefitsCost.toPrecision(2));\r",
							"    pm.expect(employee.net.toPrecision(2)).to.eql(expectedNet.toPrecision(2));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic VGVzdFVzZXI4MzohNUFSfXlTQy1pdnc=",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees/6bf4617d-911f-4d3f-9f99-4f2b96a231ea",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"api",
						"employees",
						"6bf4617d-911f-4d3f-9f99-4f2b96a231ea"
					]
				}
			},
			"response": [
				{
					"name": "Get Employee",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Basic {{token}}"
							}
						],
						"url": {
							"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees/{{id}}",
							"protocol": "https",
							"host": [
								"wmxrwq14uc",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"Prod",
								"api",
								"employees",
								"{{id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "319"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Mon, 03 Feb 2020 19:10:22 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "bf18fb76-80d3-4528-a665-5043bf59f85f"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "HVZ0tHDPoAMFXnA="
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-5e38701e-9141e79093a7e70db2994c31;Sampled=0"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "ORD52-C1"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "lrYWY_SO_d8jw6OeCucWpEiCGR4Mwb9BCRHlXXw-9fcWfxq4nvk39Q=="
						}
					],
					"cookie": [],
					"body": "{\n    \"partitionKey\": \"TestUser1\",\n    \"sortKey\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"username\": \"TestUser1\",\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"firstName\": \"Natasha\",\n    \"lastName\": \"Romanoff\",\n    \"dependants\": 3,\n    \"expiration\": \"2020-03-03T19:09:21+00:00\",\n    \"salary\": 52000,\n    \"gross\": 2000,\n    \"benefitsCost\": 96.1538544,\n    \"net\": 1903.84619\n}"
				}
			]
		},
		{
			"name": "Update Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);// suppose to get 201. I think 200 is ok\r",
							"});\r",
							"\r",
							"pm.test(\"Response has a JSON body\", () => {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const employee = pm.response.json();\r",
							"\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"    pm.expect(employee).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify an Employee Has All Properties\", () => {\r",
							"    pm.expect(employee.firstName).to.be.a('string');\r",
							"    pm.expect(employee.lastName).to.be.a('string');\r",
							"    pm.expect(employee.dependants).to.be.a('number');\r",
							"    pm.expect(employee.salary).to.be.a('number');\r",
							"    pm.expect(employee.gross).to.be.a('number');\r",
							"    pm.expect(employee.benefitsCost).to.be.a('number');\r",
							"    pm.expect(employee.net).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify employees’ Benefits Packages\", () => {\r",
							"    let monthlySalary = 2000;\r",
							"    let nunOfpaychecks = 26;\r",
							"    let costOfBenefitsPerYear = 1000;\r",
							"    let dependentCostPerYear = 500;\r",
							"    let expectedSalary = monthlySalary * nunOfpaychecks;       \r",
							"    let numOfdependants = 2;\r",
							"    let expectedBenefitsCost = (costOfBenefitsPerYear + dependentCostPerYear * numOfdependants) / 26;\r",
							"    let expectedNet = monthlySalary - expectedBenefitsCost;\r",
							"    pm.expect(employee.dependants).to.eql(numOfdependants);\r",
							"    pm.expect(employee.salary).to.eql(expectedSalary);\r",
							"    pm.expect(employee.gross).to.eql(monthlySalary);\r",
							"    pm.expect(employee.benefitsCost.toPrecision(2)).to.eql(expectedBenefitsCost.toPrecision(2));\r",
							"    pm.expect(employee.net.toPrecision(2)).to.eql(expectedNet.toPrecision(2));    \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Basic VGVzdFVzZXI4MzohNUFSfXlTQy1pdnc=",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"f26746b3-cc15-4216-8fb2-fe095d89be22\",\r\n    \"firstName\": \"Update\",\r\n    \"lastName\": \"User\",\r\n    \"dependants\": 2\r\n}"
				},
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"api",
						"employees"
					]
				}
			},
			"response": [
				{
					"name": "Update Employee",
					"originalRequest": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\r\n    \"firstName\": \"Wanda\",\r\n    \"lastName\": \"Maximoff\",\r\n    \"dependants\": 2\r\n}"
						},
						"url": {
							"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees",
							"protocol": "https",
							"host": [
								"wmxrwq14uc",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"Prod",
								"api",
								"employees"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "273"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Mon, 03 Feb 2020 19:12:29 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "b3f07a0a-aba4-48e4-9855-2b6fc99920e3"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "HVaIhGR9IAMFZgw="
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-5e38709c-30cd94066950169ffcb7b740;Sampled=0"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "ORD52-C1"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "aFTv25JDJ9ReKZpm8rSalwgyZ3wvDFHd39pTnfc_isJNtJ9H4qXnXw=="
						}
					],
					"cookie": [],
					"body": "{\n    \"partitionKey\": \"TestUser1\",\n    \"sortKey\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"username\": \"TestUser1\",\n    \"id\": \"1945d706-39f3-49eb-bea8-98abcf766e5e\",\n    \"firstName\": \"Wanda\",\n    \"lastName\": \"Maximoff\",\n    \"dependants\": 2,\n    \"salary\": 52000,\n    \"gross\": 2000,\n    \"benefitsCost\": 76.92308,\n    \"net\": 1923.0769\n}"
				}
			]
		},
		{
			"name": "Delete Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);// suppose to get 201. I think 200 is ok\r",
							"});\r",
							"//TODO: Nice to check the count before (Pre-request script) and after delete employe by calling the get all employees"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic VGVzdFVzZXI4MzohNUFSfXlTQy1pdnc=",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees/3d3b0db8-dd30-4e62-9a10-9882596e791e",
					"protocol": "https",
					"host": [
						"wmxrwq14uc",
						"execute-api",
						"us-east-1",
						"amazonaws",
						"com"
					],
					"path": [
						"Prod",
						"api",
						"employees",
						"3d3b0db8-dd30-4e62-9a10-9882596e791e"
					]
				}
			},
			"response": [
				{
					"name": "Delete Employee",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://wmxrwq14uc.execute-api.us-east-1.amazonaws.com/Prod/api/employees/{{id}}",
							"protocol": "https",
							"host": [
								"wmxrwq14uc",
								"execute-api",
								"us-east-1",
								"amazonaws",
								"com"
							],
							"path": [
								"Prod",
								"api",
								"employees",
								"{{id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "plain",
					"header": [
						{
							"key": "Content-Length",
							"value": "0"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Date",
							"value": "Mon, 03 Feb 2020 19:13:30 GMT"
						},
						{
							"key": "x-amzn-RequestId",
							"value": "9bc8a4a9-6860-4fea-8d16-e49c291b1d86"
						},
						{
							"key": "x-amz-apigw-id",
							"value": "HVaSIHvFIAMFkCg="
						},
						{
							"key": "X-Amzn-Trace-Id",
							"value": "Root=1-5e3870da-ab5c33d01cc1ff705e9da8a0;Sampled=0"
						},
						{
							"key": "X-Cache",
							"value": "Miss from cloudfront"
						},
						{
							"key": "Via",
							"value": "1.1 7b891ba5ffaf08dd209adf67026190db.cloudfront.net (CloudFront)"
						},
						{
							"key": "X-Amz-Cf-Pop",
							"value": "ORD52-C1"
						},
						{
							"key": "X-Amz-Cf-Id",
							"value": "pr-VjFpfZKGE1FX_OZ9wEbNuPjPBwCOk1AZqg4X54cI-b_Q2MtGVVA=="
						}
					],
					"cookie": [],
					"body": "    "
				}
			]
		}
	]
}